/*
 * This source file was generated by the Gradle 'init' task
 */
package 코딩테스트.연습;

import java.io.*;
import java.util.*;


public class App {
    public String getGreeting() {
        return "Hello World!";
    }


    public String solution(String my_string) { // StringBuilder 예시       StringBuilder result = new StringBuilder();
        StringBuilder result = new StringBuilder();
        for (char c : my_string.toCharArray()) {
            if (Character.isUpperCase(c)) {
                result.append(Character.toLowerCase(c));
            } else {
                result.append(Character.toUpperCase(c));
            }
        }
        result.setCharAt(1,'3');
        result.deleteCharAt(0);
        result.charAt(0);
        return result.toString();
    }

    public float DataForm() { // 데이터 종류
        boolean a= true;
        short b1 = 1;
        int b2 = 2;
        long b3 = 3;
        float c1 = 4;
        double c2 = 5;
        return c1;
    }

    public void ArrayForm(){ // 배열
        boolean a[] = {true,true,false};
        short b1[] = {1,1,1};
        int b2[] = {1,1,1};
        long b3[] = {1,1,1};
        float c1[] = {1,1,1};
        double c2[] = {1,1,1};
        String d[] = {"a","b","c"};
        System.out.printf("%s\n",d[0]);
    }

    public void grammerForm(){ // 연산자
        int a = 1;
        int b = 2;
        int r1 = ++a;
        int r2 = a+b; // float의 나누기는 소숫점나옴 , int간 나누기는 정수
        int r3 = a<<b;
        boolean r4 = a<b;
        int r5 = a&b;
        boolean r6 = (a>b) || (a<1);
        int r7 = (a>b)? 1:0;
        System.out.printf("%d,%d,%d,%s,%d,%s,%d\n",r1,r2,r3,r4,r5,r6,r7);
    }

    public void ConditionalForm(){ // 조건문
        int a = 1;
        int b = 2;
        // if 문
        if(a>b){
            System.out.println("ifTrue");
        }else if(b==2){
            System.out.println("b2True");
        }else {
            System.out.println("allFalse");
        }
        // switch case 문 
        switch(a){
            case 0:
                System.out.println("switchCase0");
            case 1:
                System.out.println("switchCase1");
            case 2:
                System.out.println("switchCase2");
                break;
            case 3:
                System.out.println("switchCase3");
        }
    }

    public void StateForm(){ // 반복문
        int a = 1;
        int b = 2;
        //for문
        for(;a<b;b--){
            System.out.println("forSucess");
        }
        //while문
        while(a==b){
            System.out.println("whileSucess");
            b--;
        }
        //do while문
        do {
            System.out.printf("%d,%d\n",a,b);
            b++;
        } while (b<5);
    }

    // 입출력함수
    public void InOutForm(){
        // Scanner 방식 (nextLine을 제외하고 띄어쓰기로 값을 받음)
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt(); 
        String b = sc.next();
        String c = sc.nextLine();
        System.out.println(a+b+c);
        //문자열 포맷
        System.out.printf("%b %c %s %d %o %x %f",true,'c',"String",10,8,16,0.5);
    }

    // 문자열 함수
    public void StringForm(){
        String a = "a";
        String b = "abcde";

        //조건
        System.out.println(a.equals("b"));
        System.out.println(b.contains("e"));
        System.out.println(b.startsWith("a"));
        System.out.println(b.endsWith(a));
        //조회
        System.out.println(b.length());
        System.out.println(b.substring(0,2));
        System.out.println(b.indexOf("c")); // c가 있는 첫번째 인덱스
        System.out.println(b.charAt(3));
        //변환
        String d = "1";
        int e = 2;
        System.out.printf("%d",Integer.valueOf(d));
        System.out.printf("%d",Integer.parseInt(d));
        System.out.printf("%s",Integer.toString(e));
        System.out.println(b.toUpperCase());
        System.out.println(b.toLowerCase());
        System.out.println(b.toCharArray());
        //변경
        System.out.println(b.concat(a));
        System.out.println(b.replaceAll("c","C")); // 정규표현식 변경
        String result = b.replaceAll("[0-9a-zA-Z]", ""); // 정규 표현식 변경
        System.out.println(b.replace("a","A")); // 문자열 변경
        String c[] = b.split("c"); System.out.println(c[0]); //split은 문자를 기준으로 배열로 나눠 저장
        System.out.println(b.trim()); // 문자열 시작과 끝의 공백제거
    }

    // 수학 함수
    public void MathForm(){
        int a[]={1,2,3,4,5,6};
        System.out.println(Math.abs(-10)); // 절댓값
        System.out.println((int)(Math.random()*100)); // 랜덤값
        System.out.println(Math.max(1,2)); // 둘중에 큰값
        System.out.println(Math.min(1,2)); // 둘중에 작은값
        System.out.println(Math.round(3.5)); // 반올림(소숫점 첫번째)
        System.out.println(Math.floor(3.2)); // 내림
        System.out.println(Math.ceil(3.2)); // 올림
        System.out.println(Math.pow(2,5)); // 제곱
        System.out.println(Math.sqrt(9)); // 제곱근
    }

    // 배열 함수
    public void ArraysForm(){
        int arr[]={1,2,3,4,5}; // 기본 데이터 타입 배열(오름차순만 가능)
        int arr1[] = {0,0,0};
        String arrs[] = {"A","B","C","D","E"}; // 객체 참조 배열, wrapper 클래스(오름차순, 내림차순 가능)
        Arrays.sort(arr); // 오름차순
        Arrays.sort(arrs,Collections.reverseOrder()); // 내림차순
        Arrays.fill(arr,1); // 배열 채우기
        int len = arr.length; // 배열 크기   

        Arrays.copyOf(arr,2); // 배열 0부터 복사
        Arrays.copyOfRange(arr,1,2); // 배열 부분 복사
        Arrays.asList(arr); // 배열 리스트로 전환 #기본 데이터 타입은 오류 -> wrapper 객체일 경우, 가능
        Arrays.equals(arr,arr1);

        System.out.println(Arrays.toString(Arrays.copyOf(arr,3)));
    }
    
    public float solution(float num1, float num2) {
        float answer = num1/num2;
        return answer;
    }

    //리스트 함수(인덱스 기반)
    public void ListForm(){
        List<Integer> arrayList = new ArrayList<>();
        List<Integer> arrayList2 = new ArrayList<>();

        // 삽입 , 삭제 , 갱신 , 조회
        arrayList.add(1);
        arrayList.add(3);
        arrayList2.add(0,2);
        arrayList.addAll(arrayList2); // 리스트 합체
        arrayList.remove(2); // 인덱스 위치의 값을 삭제
        arrayList.set(1,3); // 인덱스 위치의 값을 변경
        System.out.println(arrayList.get(1)); // 인덱스 값으로 조회
        System.out.println(arrayList.indexOf(3)); // 인덱스 값을 조회
        System.out.println(arrayList.lastIndexOf(1)); //마지막에서 부터 인덱스 값을 조회
        System.out.println(arrayList.contains(1)); // 값이 있는지 조회
        System.out.println(arrayList.subList(0,1)); // 부분 조회
        System.out.println(Arrays.toString(arrayList.toArray())); // list -> array
        
        // 상태 조회
        System.out.println(arrayList.equals(arrayList2));
        System.out.println(arrayList.isEmpty());
        System.out.println(arrayList.size());
        System.out.println(arrayList.iterator());
        System.out.println(arrayList.toArray());
        
        //  정렬,최대,최소,복사,이진탐색  (collections 공통 기능)
        Collections.sort(arrayList); // 오름차순 정렬 * 컬렉션 함수는 리스트에 바로 반영
        Collections.reverse(arrayList); // 리스트 역전
        System.out.println(Collections.max(arrayList));
        System.out.println(Collections.min(arrayList)); 
        System.out.println(Collections.binarySearch(arrayList, 1)); // 정렬하고 사용해야함, 인덱스 값 반환
        System.out.println(Collections.disjoint(arrayList,arrayList2));// 두배열에 공통요소 없으면 true, 공통요소 있으면 false
        Collections.copy(arrayList,arrayList2); // arrayList2의 값을 복사함
        System.out.println(Arrays.toString(arrayList.toArray()));
        System.out.println(arrayList);
    }
    // 스택함수 , push/pop/peek/search를 제외하고 List의 모든 함수를 공유함.
    // 값 기반
    public void StackForm(){
        Stack<Integer> stack = new Stack<>();
        System.out.println(stack.push(1));
        System.out.println(stack.push(3));
        System.out.println(stack.push(2));
        Collections.sort(stack);
        System.out.println(stack);
        System.out.println(stack.pop());
        System.out.println(stack.peek()); // 스택의 TOP(맨 위)부터 1번 인덱스의 값
        System.out.println(stack.search(1)); //LIFO(후입선출) 원칙을 따르므로, 스택의 TOP(맨 위)부터 1번 인덱스로 계산, 요소없으면 -1
    }
    //ArrayDeque의 경우, 스택과 큐 모두 구현가능하지만, 인덱스기반이 아니기 때문에 인덱스기능을 사용하려면 List로 변환작업 필요.
    public void QeueForm(){
        Deque<Integer> deque = new ArrayDeque<>();
        deque.addLast(1); // 뒤에 요소 추가  [1]
        deque.addLast(2); // [1,2]
        deque.addFirst(3); // 앞에 요소 추가 [3,1,2]
        System.out.println(deque.pollFirst()); // 맨앞(3) 제거 후 반환
        System.out.println(deque.pollLast()); // 맨뒤(2) 제거 후 반환
        System.out.println(deque.peekFirst()); // 맨앞(1) 확인
        System.out.println(deque.peekLast()); // 맨뒤(1) 확인

        Deque<Integer> stack = new ArrayDeque<>();
        stack.push(10); // 앞에 요소 추가
        stack.push(20);
        stack.push(30);
        System.out.println(stack.pop()); // 30
        System.out.println(stack.peek()); // 20

        //삽입,삭제,갱신
        deque.remove(3);// 값으로 삭제
        deque.clear();
        System.out.println(deque.size()); // 1
        System.out.println(deque.isEmpty()); // true

        deque.addLast(1);
        deque.addLast(2);
        deque.addLast(3);
        deque.addLast(5);
        deque.addLast(4);
        System.out.println(deque);
        System.out.println(Collections.max(deque));
    }

    public void HashMapForm(){
        HashMap<String,String> map = new HashMap<>();
        map.put("a","apple");
        map.put("b","banana");
        map.get("a");
        map.replace("a","c");
        map.containsKey("a");
        map.containsValue("banana");
        map.keySet();
        map.values();
        map.remove("b");
        map.size();
        for(Map.Entry<String,String> entry : map.entrySet()){ // 타입 생각하기
            entry.getKey();
            entry.getValue();
        }
        map.clear();
    }
    //set은 값기반
    public void SetForm(){
        HashSet<Integer> hashSet = new HashSet<>();
        Set<Integer> TreeSet = new TreeSet();
        hashSet.add(1);
        hashSet.remove(1);
        hashSet.contains(1);
        hashSet.size();
        hashSet.isEmpty();
        hashSet.clear();
        hashSet.iterator();
    }
    //binary를 알아야 푸는 문제
    public void binary(){
        String num1="101";
        String num2="1101";

        int n1 = Integer.parseInt(num1,2);
        int n2 = Integer.parseInt(num2,2);

        String answer = Integer.toBinaryString(n1+n2);
    }
    public void func(){
        //최대 공약수 - 유클리드 호제법
        int num1 = 10;
        int num2 = 25;
        gcd(num1,num2);

    }
    public int gcd(int a, int b){
        if(a%b==0){
            return b;
        }
        return gcd(b,a%b);
    }

    public static void main(String[] args) {
        //System.out.println(new App().solution(10,3));
        new App().QeueForm();
    }
}
